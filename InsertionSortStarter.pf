import Base
import UInt
import List
import Set
import MultiSet

recursive sorted(List<UInt>) -> bool {
  sorted(empty) = true
  sorted(node(a, next)) =
    sorted(next) and (all b:UInt. if b ∈ set_of(next) then a ≤ b)
}

recursive insert(List<UInt>,UInt) -> List<UInt> {
  insert(empty, x) = node(x, empty)
  insert(node(y, next), x) =
    if x ≤ y then
      node(x, node(y, next))
    else
      node(y, insert(next, x))
}

theorem less_equal_insert:
  all xs:List<UInt>. all x:UInt, y:UInt.
  if y ≤ x and (all b:UInt. if b ∈ set_of(xs) then y ≤ b)
  then all c:UInt. if c ∈ set_of(insert(xs,x)) then y ≤ c
proof
  induction List<UInt>
  case empty {
    arbitrary x:UInt, y:UInt
    suppose prem
    arbitrary c:UInt
    expand insert | 2*set_of
    assume xc
    replace symmetric xc
    conclude y ≤ x by prem
  }
  case node(a, xs') suppose IH {
    arbitrary x:UInt, y:UInt
    suppose prem
    have y_le_x: y ≤ x by prem
    have y_le_a: y ≤ a by expand set_of in (conjunct 1 of prem)[a]
    cases uint_dichotomy[x,a]
    case x_le_a: x ≤ a {
      arbitrary c:UInt
      expand insert
      replace apply eq_true to x_le_a
      show if c ∈ set_of(node(x, node(a, xs'))) then y ≤ c
      expand 2*set_of
      assume xc_ac_cxs
      cases xc_ac_cxs
      case xc: x = c {
        conclude y ≤ c by replace xc in y_le_x
      }
      case ac: a = c {
        conclude y ≤ c by replace ac in y_le_a
      }
      case cxs: c ∈ set_of(xs') {
        conclude y ≤ c by apply (conjunct 1 of (expand set_of in prem))[c] to cxs
      }
    }
    case a_l_x: a < x {
      have not_x_le_a: not (x ≤ a)
        by apply uint_not_less_equal_iff_greater to a_l_x
      expand insert
      replace (apply eq_false to not_x_le_a)
      expand set_of
      arbitrary c:UInt
      assume ac_cins
      cases ac_cins
      case ac: a = c {
        conclude y ≤ c by replace ac in y_le_a
      }
      case cins: c ∈ set_of(insert(xs', x)) {
        have y_le_xs: all b:UInt. if b ∈ set_of(xs') then y ≤ b
          by expand set_of in prem
        have IH': all d:UInt. (if d ∈ set_of(insert(xs', x)) then y ≤ d)
          by apply IH to y_le_x, y_le_xs
        conclude y ≤ c by apply IH'[c] to cins
      }
    }
  }
end

theorem insert_sorted: all xs:List<UInt>. all x:UInt.
  if sorted(xs) then sorted(insert(xs, x))
proof
  induction List<UInt>
  case empty {
    arbitrary x:UInt
    suppose _
    conclude sorted(insert(empty,x))
      by expand insert | 2*sorted | set_of.
  }
  case node(y, next) suppose IH {
    arbitrary x:UInt
    suppose s_yn: sorted(node(y,next))
    have s_n: sorted(next) by expand sorted in s_yn
    have y_le_next: all b:UInt. (if b ∈ set_of(next) then y ≤ b)
      by expand sorted in s_yn
    show sorted(insert(node(y,next),x)) 
    switch x ≤ y for insert {
      case true  suppose x_le_y_true {
        have x_le_y: x ≤ y   by replace x_le_y_true.
        show sorted(node(x, node(y, next)))
        expand 2*sorted | set_of
        show sorted(next) and (all b:UInt. (if b ∈ set_of(next) then y ≤ b))
             and (all b:UInt. (if (y = b or b ∈ set_of(next)) then x ≤ b))
        have x_le_y_next: all b:UInt. (if (y = b or b ∈ set_of(next)) then x ≤ b) by {
          arbitrary b:UInt
          assume yb_bnext
          cases yb_bnext
          case y_b: y = b {
            show x ≤ b
            replace symmetric y_b
            conclude x ≤ y by x_le_y
          }
          case b_next: b ∈ set_of(next) {
            have y_le_b: y ≤ b by apply y_le_next to b_next
            conclude x ≤ b by apply uint_less_equal_trans to x_le_y, y_le_b
          }
        }
        s_n, y_le_next, x_le_y_next
      }
      case false  suppose x_le_y_false {
        have not_x_le_y: not (x ≤ y)
            by suppose x_le_y replace x_le_y_false in x_le_y
        have y_l_x: y < x  by apply uint_not_less_equal_iff_greater to not_x_le_y
        expand sorted
        show sorted(insert(next, x)) and (all b:UInt. (if b ∈ set_of(insert(next, x)) then y ≤ b))
        have s_next_x: sorted(insert(next,x)) by apply IH[x] to s_n
        have y_le_x: y ≤ x by apply uint_less_implies_less_equal to y_l_x
        have y_le_next_x: all b:UInt. (if b ∈ set_of(insert(next, x)) then y ≤ b)
            by apply less_equal_insert[next, x, y] to y_le_x, y_le_next
        s_next_x, y_le_next_x
      }
    }
  }
end

theorem insert_contents: all xs:List<UInt>. all y:UInt.
  mset_of(insert(xs,y)) = m_one(y) ⨄ mset_of(xs)
proof
  induction List<UInt>
  case empty {
    arbitrary y:UInt
    conclude mset_of(insert(empty,y)) = m_one(y) ⨄ mset_of(empty)
        by expand insert | mset_of | mset_of.
  }
  case node(x, xs') suppose IH {
    arbitrary y:UInt
    suffices mset_of(insert(node(x, xs'), y))
           = m_one(y) ⨄ mset_of(node(x, xs'))    by .
    switch y ≤ x for insert {
      case true suppose yx_true {
        expand 2*mset_of.
      }
      case false suppose yx_false {
        equations
              mset_of(node(x, insert(xs', y)))
            = m_one(x) ⨄ mset_of(insert(xs', y))          by expand mset_of.
        ... = m_one(x) ⨄ m_one(y) ⨄ mset_of(xs')          by replace IH[y].
        ... = (m_one(x) ⨄ m_one(y)) ⨄ mset_of(xs')
                by symmetric m_sum_assoc<UInt>[m_one(x), m_one(y), mset_of(xs')]
        ... = (m_one(y) ⨄ m_one(x)) ⨄ mset_of(xs')
                by replace m_sum_commutes<UInt>[m_one(x), m_one(y)].
        ... = m_one(y) ⨄ m_one(x) ⨄ mset_of(xs')
                by m_sum_assoc<UInt>[m_one(y), m_one(x), mset_of(xs')]
        ... = #m_one(y) ⨄ mset_of(node(x, xs'))#          by expand mset_of.
      }
    }
  }
end

recursive isort(List<UInt>, List<UInt>) -> List<UInt> {
  isort([], ys) = []
  isort(node(x, xs), ys) = isort(xs, ys)
}

theorem isort_sorted: all xs:List<UInt>. all ys:List<UInt>.
  if sorted(ys)
  then sorted( isort(xs, ys) )
proof
  sorry
end

theorem isort_contents: all xs:List<UInt>. all ys:List<UInt>.
  mset_of( isort(xs, ys) ) = mset_of(xs) ⨄ mset_of(ys)
proof
  sorry
end

define insertion_sort2 : fn List<UInt> -> List<UInt>
    = λxs{ isort(xs, empty) }

theorem insertion_sort2_sorted: all xs:List<UInt>. 
  sorted( insertion_sort2(xs) )
proof
  sorry
end

theorem insertion_sort2_contents: all xs:List<UInt>. 
  mset_of( insertion_sort2(xs) ) = mset_of(xs)
proof
  sorry
end

