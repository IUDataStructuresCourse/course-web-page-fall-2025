/* ~/~ begin <<deduce-more-proof.en#DeduceIntroProof2.pf>>[init] */
import UInt
import DeduceProgramming1
import DeduceIntroProof
import Set
import List

/* ~/~ begin <<deduce-more-proof.en#algebra_example>>[init] */
theorem algebra_example: all x:UInt. (1 + x) * x = x * x + x
proof
  arbitrary x:UInt
  equations
        (1 + x) * x
      = x * (1 + x)        by uint_mult_commute
  ... = x * 1 + x * x      by replace uint_dist_mult_add.
  ... = x * x + x * 1      by uint_add_commute
  ... = x * x + x          by .
end
/* ~/~ end */
/* ~/~ begin <<deduce-more-proof.en#modus_ponens_example>>[init] */
theorem modus_ponens_example: all x:UInt. max(x, 1 + x) = 1 + x
proof
  arbitrary x:UInt
  have: x ≤ 1 + x   by uint_less_equal_add_left
  conclude max(x, 1 + x) = 1 + x  by apply uint_max_equal_greater_right to recall x ≤ 1 + x
end
/* ~/~ end */
/* ~/~ begin <<deduce-more-proof.en#assume_example>>[init] */
theorem assume_example: all xs:UIntList. if len(xs) = 0 then xs = Empty
proof
  arbitrary xs:UIntList
  assume premise: len(xs) = 0
  switch xs {
    case Empty {
      .
    }
    case Node(x, xs') assume xs_node: xs = Node(x, xs') {
      have len_zero: len(Node(x, xs')) = 0 by replace xs_node in premise
      conclude false by expand len in len_zero
    }
  }
end
/* ~/~ end */
/* ~/~ begin <<deduce-more-proof.en#prove_true>>[init] */
theorem prove_true: true
proof
  .
end
/* ~/~ end */
/* ~/~ begin <<deduce-more-proof.en#false_explosion>>[init] */
theorem false_explosion: if false then 0 = 1
proof
  assume: false
  conclude 0 = 1 by recall false
end
/* ~/~ end */
/* ~/~ begin <<deduce-more-proof.en#list_append_empty>>[init] */
theorem list_append_empty: <U> all xs :List<U>.
  xs ++ [] = xs
proof
  arbitrary U:type
  induction List<U>
  case [] {
    conclude @[]<U> ++ [] = []  by expand operator++.
  }
  case node(n, xs') assume IH: xs' ++ [] = xs' {
    equations
          node(n, xs') ++ []
        = node(n, xs' ++ [])    by expand operator++.
    ... = node(n, xs')          by replace IH.
  }
end
/* ~/~ end */
/* ~/~ end */
